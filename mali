#!/usr/bin/env python3
"""
Description: Formatted 'following' of Apache log files
Usage:
    1. Add script to path or run it directly
    2. Flags:
        -a/--access = follow Apache's access.log
        -e/--error = follow Apache's error.log
"""

import argparse
import os
import re
import sys
import time

access_log = "/var/log/apache2/access.log"
error_log = "/var/log/apache2/error.log"

parser = argparse.ArgumentParser(prog='mali',
                                epilog='Hope you enjoy! :)',
                                description="ModSecurity Apache Log Inspector")

parser.add_argument('-a', '--access',
                    action='store_true',
                    help='Watch ' + access_log)

parser.add_argument('-e', '--error',
                    action='store_true',
                    help='Watch ' + error_log)

args = parser.parse_args()

if len(sys.argv) == 0:
    print("Please use -a, -e or -h flags")


class bcolors:
    """Color codes for colored output"""
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    ERROR = '\033[91;1m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def clear():
    """Clear the screen"""
    os.system('clear')


def tail(file, n=1, bs=1024):
    """Print lines of a file

    args:
        n: number of lines
        bs: block size

    returns:
        content of lines
    """
    with open(file, 'r', encoding='utf-8') as f:
        f.seek(0,2)
        l = f.read(1).count('\n')
        B = f.tell()
        while n >= l and B > 0:
            block = min(bs, B)
            B -= block
            f.seek(B, 0)
            l += f.read(block).count('\n')
        f.seek(B, 0)
        l = min(l,n)
        lines = f.readlines()[-l:]

    return lines


def access_parse():
    """Parse Apache access log

    Prints:
        formatted lines of the Apache access log
    """
    alines = tail(access_log, 10)

    for line in alines:
        alist = line.split(']')

        access_dict = {}
        for i in alist:
            strip = i.lstrip()
            if strip.startswith("["):
                strip = strip.replace('[', '')
                strip = strip.replace('"', '')
                (key,val) = strip.split(' ', 1)
                access_dict[key] = val

        print(f"{bcolors.BOLD}Request Time:{bcolors.ENDC} {access_dict['time']}")

        elines = tail(error_log, 15)
        uidcheck = ''.join(elines)
        if re.findall(access_dict['unique_id'], uidcheck):
            print(f"{bcolors.BOLD}Unique ID:{bcolors.ENDC} {bcolors.ERROR}{access_dict['unique_id']}{bcolors.ENDC}")
        else:
            print(f"{bcolors.BOLD}Unique ID:{bcolors.ENDC} {access_dict['unique_id']}")

        print(
            f"{bcolors.BOLD}Remote Host:{bcolors.ENDC} {access_dict['remote_host']}\n"
            f"{bcolors.BOLD}User Agent:{bcolors.ENDC} {access_dict['remote_user_agent']}\n"
            f"{bcolors.BOLD}HTTP Referer:{bcolors.ENDC} {access_dict['http_referer']}\n"
            f"{bcolors.BOLD}HTTP Request:{bcolors.ENDC} {access_dict['http_request']}\n"
            f"{bcolors.BOLD}HTTP Status:{bcolors.ENDC} {access_dict['http_status']}\n"
            f"{bcolors.BOLD}SSL Protocol:{bcolors.ENDC} {access_dict['ssl_protocol']}\n"
            f"{bcolors.BOLD}SSL Cipher:{bcolors.ENDC} {access_dict['ssl_cipher']}\n"
        )


def error_parse():
    """Parse Apache error log

    Prints:
        formatted lines of the Apache error log
    """
    elines = tail(error_log, 20)
    for line in elines:
        if line.startswith('[time'):
            elist = line.split('] ')

            error_dict = {}
            for i in elist:
                lst = i.lstrip()
                if lst.startswith("["):
                    lst = lst.replace('[', '')
                    lst = lst.replace('"', '')
                    lst = lst.replace(']\n', '')
                    key, value = lst.split(' ', 1)

                if lst.startswith("ModSecurity"):
                    new = lst.split(' [')
                    for i in new:
                        lst = i.lstrip()
                        lst = lst.replace('"', '')
                        lst = lst.replace(':', '')
                        key, value = lst.split(' ', 1)

                error_dict[key] = value

                if "unique_id" in error_dict:
                    if "file" in error_dict:
                        print(
                            f"{bcolors.ERROR}Time:{bcolors.ENDC} {error_dict['time']}\n"
                            f"{bcolors.ERROR}Unique ID:{bcolors.ENDC} {error_dict['unique_id']}\n"
                            f"{bcolors.ERROR}Remote Host:{bcolors.ENDC} {error_dict['client']}\n"
                            f"{bcolors.ERROR}CRS Rule ID:{bcolors.ENDC} {error_dict['id']} ({error_dict['file']})\n"
                            f"{bcolors.ERROR}HTTP Referer:{bcolors.ENDC} {error_dict['http_referer']}\n"
                            f"{bcolors.ERROR}Client:{bcolors.ENDC} {error_dict['client']}"
                        )
                    else:
                        print(
                            f"{bcolors.ERROR}CRS Rule ID:{bcolors.ENDC} {error_dict['id']}\n"
                            f"{bcolors.ERROR}HTTP Referer:{bcolors.ENDC} {error_dict['http_referer']}\n"
                            f"{bcolors.ERROR}Client:{bcolors.ENDC} {error_dict['client']}"
                        )
                    print(f"{bcolors.ERROR}Msg:{bcolors.ENDC} {error_dict['msg']}")
                    if "severity" in error_dict:
                        print(f"{bcolors.ERROR}Severity:{bcolors.ENDC} {error_dict['severity']}\n")
                    else:
                        print()


class Watcher():
    """Class for watching log file"""
    def __init__(self):
        self._cached_stamp = 0
        if args.access:
            self.filename = access_log
        if args.error:
            self.filename = error_log

    def monitor(self):
        """Check file modification time and follow the log file"""
        stamp = os.stat(self.filename).st_mtime
        if stamp != self._cached_stamp:
            # Clear the screen
            clear()

            self._cached_stamp = stamp

            # Process last request in access.log
            if args.access:
                access_parse()

            # Process error requests
            if args.error:
                error_parse()


follow = Watcher()
while True:
    try:
        time.sleep(1)
        follow.monitor()
    except KeyboardInterrupt:
        print('\nDone')
        break
    except:
        print(f'Unhandled error: {sys.exc_info()}')

# vim: ft=python ts=4 sts=4 sw=4 nosr et
